package com.hinear.hxt.servlet.notice;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

import com.hinear.hxt.entity.NoticeInfo;
import com.hinear.hxt.entity.TeacherGroup;
import com.hinear.hxt.util.HttpUtils;
import com.hinear.hxt.util.JSONUtil;
import com.hinear.hxt.util.TransformUtils;

/**
 * 新增通知数据
 */
@WebServlet("/addNoticeServlet")
public class AddServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	/**
	 * 参数 title标题 content内容 typeid类型id {@link NoticeInfo#TYPE_CLASS}
	 * 教师通知需teacherGroupIds教师组id集合 班级通知需cid班级id
	 * 
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		HttpSession session = request.getSession();
		Object sid = (int) session.getAttribute("sid");
		Object userId = session.getAttribute("userId");
		if (sid != null && userId != null) {
			// 获取request 请求的params
			String title = request.getParameter("title");
			String content = request.getParameter("content");
			int typeid = TransformUtils.transformInt(request.getParameter("typeId"));
			System.out.println("title:"+title+" content="+content);
			if (typeid == 0) {
				System.out.println("typeid参数必须设置");
				return;
			}
			NoticeInfo noticeInfo = new NoticeInfo();
			noticeInfo.setTYPEID(typeid);
			noticeInfo.setUSERID((int) userId);
			noticeInfo.setRECEIVESCHOOL((int) sid);
			noticeInfo.setNEWSTITLE(title);
			noticeInfo.setCONTENT(content);
			String serverType;
			if (NoticeInfo.TYPE_TEACHER == typeid) { //教师通知2
				serverType = "07B";
				String[] teacherGroupIds = request.getParameterValues("teacherGroupIds");
				if (teacherGroupIds != null && teacherGroupIds.length != 0) {
					List<TeacherGroup> noticegroup = new ArrayList<>();
					for (String tgId : teacherGroupIds) {
						TeacherGroup tGroup = new TeacherGroup();
						tGroup.setGroup_id(Integer.parseInt(tgId));
						noticegroup.add(tGroup);
					}
					noticeInfo.setNoticegroup(noticegroup);
				}
			} else { //学校通知1；班级通知3
				serverType = "06A";
				//获取文件名
//				ArrayList list = new ArrayList();
				List list = (ArrayList) session.getAttribute("fileNameList");
				if(list.size()==0 || !list.isEmpty()){
					Iterator it = list.iterator();
					while(it.hasNext()){
						String fileName = (String) it.next();
						System.out.println("保存时文件名："+ fileName);
					}
				}
				
				if (NoticeInfo.TYPE_CLASS == typeid) { //班级通知
					// String cid = request.getParameter("cid");
					// noticeInfo.setRECEIVECLASSES(Integer.parseInt(cid));
				}
			}

			String noticeJson = JSONUtil.toJSON(noticeInfo);
			Map<String, String> params = new HashMap<>();
			params.put("Notices", noticeJson);
			String result = HttpUtils.getInstance().get(serverType, params);
			PrintWriter pw = response.getWriter();
			pw.write(result);
		}
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doGet(request, response);
	}
	
	/* 图片上传到服务器  */
	private void UploadImgService(HttpServletRequest request) {
		System.out.println("UploadImgService(进入上传图片方法...)");
		StringBuffer url = request.getRequestURL();
		String newurl = url.substring(0, url.lastIndexOf("/"));
		String servicePath = newurl + "/upload" + "/img" + "/schoolNotice/"; //上传文件服务器目录（学校通知img）
		String basePath = this.getServletContext().getRealPath("/upload" + File.separator + "img" + File.separator + "schoolNotice/");
		System.out.println("basePath"+basePath);
		final String allowFileSuffix = "jpg,png,jpeg";
		
		File serviceDir = new File(basePath);
		if(!serviceDir.exists()){//判断目录是否存在
			serviceDir.mkdirs();
		}
		// 检查输入请求是否为multipart表单数据。
				if (ServletFileUpload.isMultipartContent(request)) {
					DiskFileItemFactory dff = new DiskFileItemFactory();// 创建该对象
					dff.setRepository(serviceDir);// 指定上传文件的临时目录
					dff.setSizeThreshold(1024000);// 指定在内存中缓存数据大小,单位为byte
					ServletFileUpload sfu = new ServletFileUpload(dff);// 创建该对象
					sfu.setFileSizeMax(5000000);//指定单个上传文件的最大尺寸
//					sfu.setSizeMax(10000000);// 指定一次上传多个文件的总尺寸
					sfu.setHeaderEncoding("utf-8");
					String type = null;

					List<FileItem> fileItems = new ArrayList<FileItem>();
					try {
						fileItems = sfu.parseRequest(request); //获取上传文件
					} catch (FileUploadException e1) {
						System.out.println("文件上传发生错误" + e1.getMessage());
					}
					String fullPath = null;
					String fileName = null;
					for (FileItem fileItem : fileItems) { //遍历上传文件

						// 判断该表单项是否是普通类型
						if (fileItem.isFormField()) {
							String name = fileItem.getFieldName();// 控件名
							String value = fileItem.getString();
							System.out.println("name="+name+" value="+value);
							fileName = name.substring(name.lastIndexOf(File.separator) + 1);
							System.out.println("fileName111=="+fileName);

						} else {
							String filePath = fileItem.getName();
							if (filePath == null || filePath.trim().length() == 0)
								continue;
							fileName = filePath.substring(filePath.lastIndexOf(File.separator) + 1);
							String extName = filePath.substring(filePath.lastIndexOf(".") + 1);
							fullPath = basePath + File.separator + fileName;
							if (allowFileSuffix.indexOf(extName) != -1) {
								try {
									fileItem.write(new File(fullPath));
								} catch (Exception e) {
									e.printStackTrace();
								}

							} else {
								try {
									throw new FileUploadException("文件格式不正确");
								} catch (FileUploadException e) {
									e.printStackTrace();
								}
							}
						}
					}
					
				}
		
	}


}
