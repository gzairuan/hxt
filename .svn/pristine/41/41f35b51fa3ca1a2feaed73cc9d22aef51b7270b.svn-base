package com.hinear.hxt.servlet.common.upload;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.hinear.hxt.entity.UserInfo;

/**
 * 图片上传处理
 */
@WebServlet("/imgUploadHandler")
public class ImgUploadServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		HttpSession session = request.getSession();
		UserInfo userInfo = (UserInfo) session.getAttribute("userInfo");
		String flag = request.getParameter("optFlag");
		String parentFolder;
		switch (flag) {
		case "notice":
			String noticeType = request.getParameter("type");
			parentFolder = "upload" + File.separator + "school" + userInfo.getSID() + File.separator + "notice"
					+ File.separator + noticeType;
			break;
		default:
			parentFolder = "upload";
			break;
		}

		// 获得磁盘文件条目工厂
		DiskFileItemFactory factory = new DiskFileItemFactory();
		// 获取文件缓存文件夹的路径
		String tempPath = session.getServletContext().getRealPath("/temp");
		// 如果没以下两行设置的话，上传大的 文件 会占用 很多内存，
		// 设置暂时存放的 存储室 , 这个存储室，可以和 最终存储文件 的目录不同
		/**
		 * 原理 它是先存到 暂时存储室，然后在真正写到 对应目录的硬盘上， 按理来说 当上传一个文件时，其实是上传了两份，第一个是以 .tem
		 * 格式的 然后再将其真正写到 对应目录的硬盘上
		 */
		File tempFolder = new File(tempPath);
		if (!tempFolder.exists()) {
			tempFolder.mkdirs();
		}
		// 设置缓存文件夹
		factory.setRepository(tempFolder);
		// 设置 缓存的大小，当上传文件的容量超过该缓存时，直接放到 暂时存储室
		factory.setSizeThreshold(1024 * 1024);

		// 高水平的API文件上传处理
		ServletFileUpload upload = new ServletFileUpload(factory);
		List<FileItem> list = null;
		try {
			list = (List<FileItem>) upload.parseRequest(request);
		} catch (FileUploadException e) {
			e.printStackTrace();
		}
		JsonArray jsonArry = new JsonArray();
		for (FileItem item : list) {
			// 获取表单的属性名字
			// String name = item.getFieldName(); //
			// 这个name就是<input>标签中的name属性，是很重要与服务器通信的方式
			// System.out.println("传来的filedName是" + name);
			// 对传入的非 简单的字符串进行处理 ，比如说二进制的 图片，电影这些
			if (!item.isFormField()) {
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss", Locale.getDefault());
				String format = sdf.format(new Date());
				int ran = (int) (Math.random() * 1000);
				String filename = format + ran + System.currentTimeMillis() + ".jpg";
				// 将文件写入服务器，第二个参数是文件名，第三个参数是要写入的文件夹 ，一般在这里文件名用随机数生成比较好
				if (writeFile(item, filename, parentFolder)) {
					JsonObject jsonObj = new JsonObject();
					String filePath = parentFolder + File.separator + filename;
					jsonObj.addProperty("filePath", filePath);
					jsonObj.addProperty("fileName", filename);
					jsonArry.add(jsonObj);
				}
			}
		}
		PrintWriter out = response.getWriter();
		out.print(jsonArry);// 返回空json字符串代表上传成功，同时在浏览器收到后会出现绿色的对勾，如果失败就传输一个"{error:'错误信息'}",这样的话进图条就走不到100%并且还会锁死
		out.flush();
		out.close();
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doGet(request, response);
	}

	/**
	 * 传入一个fileitem，并且按照给出的文件名前缀，文件名后缀（索引），文件存储相对目录来写入从互联网的到的文件
	 * 
	 * @param fileItem
	 *            传来的文件对象
	 * @param firstName
	 *            文件名加后缀
	 * @param parentFolder
	 *            相对存储目录，如："imgs"
	 *            根目录C:\apache-tomcat-7.0.61\webapps\项目名\+parentFolder\
	 * @return 文件相对路径
	 * @throws IOException
	 */
	public boolean writeFile(FileItem fileItem, String firstName, String parentFolder) throws IOException {
		boolean b = true;
		// 用原来的文件名做文件名，用项目目录的绝对地址/attachment作为目录地址
		File file1 = new File(this.getServletContext().getRealPath(parentFolder + File.separator), firstName);
		if (!file1.getParentFile().exists()) {
			file1.getParentFile().mkdirs();
		}
		file1.createNewFile();

		InputStream ins = fileItem.getInputStream();
		OutputStream ous = new FileOutputStream(file1);

		try {
			byte[] buffer = new byte[1024];
			int len = 0;
			while ((len = ins.read(buffer)) > -1)
				ous.write(buffer, 0, len);
		} catch (Exception e) {
			b = false;
		} finally {
			ous.close();
			ins.close();
		}
		return b;
	}
}
