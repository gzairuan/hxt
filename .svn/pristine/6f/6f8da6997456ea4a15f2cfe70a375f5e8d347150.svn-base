package com.hinear.hxt.servlet.notice;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.hinear.hxt.entity.MediaInfo;
import com.hinear.hxt.entity.NoticeInfo;
import com.hinear.hxt.entity.TeacherGroup;
import com.hinear.hxt.entity.UserInfo;
import com.hinear.hxt.util.EmptyUtils;
import com.hinear.hxt.util.HttpUtils;
import com.hinear.hxt.util.JSONUtil;
import com.hinear.hxt.util.TransformUtils;

/**
 * 通知数据处理
 */
@WebServlet("/noticeServlet")
public class NoticeServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		String flag = request.getParameter("optFlag");
		int typeId = TransformUtils.transformInt(request.getParameter("typeId"));// 通知类型
		if (typeId != 0) {
			UserInfo user = (UserInfo) request.getSession().getAttribute("userInfo");
			String serverType;// 接口入口标识
			Map<String, String> map = new HashMap<>();// 接口请求参数载体（将get请求的接口的参数添加到这个集合里面）
			switch (flag) {
			case "query": {
				int pageSize = 10;
				int pageIndex = 0;
				// 获取页面传过来的参数
				String limit = request.getParameter("limit");// 每页显示的条数
				if (!EmptyUtils.stringIsEmpty(limit)) {
					pageSize = Integer.parseInt(limit);
				}
				String offset = request.getParameter("offset");// 当前页第一条数据的下标（从0开始）
				if (!EmptyUtils.stringIsEmpty(offset)) {
					pageIndex = Integer.parseInt(offset) / pageSize;
				}
				if (typeId == NoticeInfo.TYPE_TEACHER) {
					// 教师通知 ---> 07 接收到通知数据 <---> 07A 自己发送出去的通知数据（默认为获取接收到的数据）
					String sendFlag = request.getParameter("sendFlag");// 发送者还是接收者
					serverType = EmptyUtils.stringIsEmpty(sendFlag) || "0".equals(sendFlag) ? "07" : "07A";
					map.put("TeacherID", "" + user.getUSERID());
				} else {
					// 学校或者班级通知
					serverType = "06";
					map.put("UserID", "" + user.getUSERID());
					if (NoticeInfo.TYPE_CLASS == typeId) {
						String cid = request.getParameter("cid");
						map.put("CID", EmptyUtils.stringIsEmpty(cid) ? "0" : cid);
					}
				}
				map.put("PageSize", pageSize + "");
				map.put("PageIndex", pageIndex + "");
				map.put("SID", "" + user.getSID());
				map.put("TYPEID", "" + typeId);

				String startDate = request.getParameter("startDate");// 开始日期
				String endDate = request.getParameter("endDate");// 结束日期
				String keyword = request.getParameter("keyword");// 关键字

				if (!EmptyUtils.stringIsEmpty(startDate)) {
					map.put("SDate", startDate);
				}
				if (!EmptyUtils.stringIsEmpty(endDate)) {
					map.put("TDate", endDate);
				}
				if (!EmptyUtils.stringIsEmpty(keyword)) {
					map.put("KEYWORD", keyword);
				}
			}
				break;
			case "add": {
				String title = request.getParameter("title");
				String content = request.getParameter("content");
				NoticeInfo noticeInfo = new NoticeInfo();
				noticeInfo.setTYPEID(typeId);
				noticeInfo.setUSERID(user.getUSERID());
				noticeInfo.setRECEIVESCHOOL(user.getSID());
				noticeInfo.setNEWSTITLE(title);
				noticeInfo.setCONTENT(content);
				if (NoticeInfo.TYPE_TEACHER == typeId) { // 教师通知2
					serverType = "07B";
					String[] teacherGroupIds = request.getParameterValues("teacherGroupIds");
					if (teacherGroupIds != null && teacherGroupIds.length != 0) {
						List<TeacherGroup> noticegroup = new ArrayList<>();
						for (String tgId : teacherGroupIds) {
							TeacherGroup tGroup = new TeacherGroup();
							tGroup.setGroup_id(Integer.parseInt(tgId));
							noticegroup.add(tGroup);
						}
						noticeInfo.setNoticegroup(noticegroup);
					}
				} else {
					serverType = "06A";
					if (NoticeInfo.TYPE_CLASS == typeId) {// 班级通知
						int cid = TransformUtils.transformInt(request.getParameter("cid"));
						noticeInfo.setRECEIVECLASSES(cid);
					}
				}

				// 获取文件名
				String[] imgUrls = request.getParameterValues("imgUrl");
				// 保存图片URL到数据库
				if (imgUrls != null && imgUrls.length != 0) {
					List<MediaInfo> list = new ArrayList<>();
					for (String url : imgUrls) {
						MediaInfo mi = new MediaInfo();
						mi.setATTACHMENTURL(url);
						mi.setOTHERTYPEID(typeId);
						list.add(mi);
					}
					noticeInfo.setData(list);
				}
				String noticeJson = JSONUtil.toJSON(noticeInfo);
				map.put("Notices", noticeJson);
			}
				break;
			case "edit": {
				serverType = NoticeInfo.TYPE_TEACHER == typeId ? "07D" : "06C";
				String noticeJson = request.getParameter("notice");
				map.put("Notices", noticeJson);
			}
				break;
			case "delete": {
				serverType = NoticeInfo.TYPE_TEACHER == typeId ? "07C" : "06B";
				String noticeId = request.getParameter("noticeId");
				map.put("ID", noticeId);
			}
				break;
			default:
				serverType = "";
				break;
			}
			if (!EmptyUtils.stringIsEmpty(serverType)) {
				// 通过http工具类请求接口数据（返回json字符串数据）
				String jsonData = HttpUtils.getInstance().get(serverType, map);
				// 返回给界面
				response.getWriter().print(jsonData);
			}
		}
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doGet(request, response);
	}

}
